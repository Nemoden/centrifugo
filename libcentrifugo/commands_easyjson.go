// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package libcentrifugo

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_pingAdminCommand(in *jlexer.Lexer, out *pingAdminCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_pingAdminCommand(out *jwriter.Writer, in *pingAdminCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.String(string(in.Data))
	out.RawByte('}')
}
func (v *pingAdminCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_pingAdminCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *pingAdminCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_pingAdminCommand(w, v)
}
func (v *pingAdminCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_pingAdminCommand(&r, v)
	return r.Error()
}
func (v *pingAdminCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_pingAdminCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_connectAdminCommand(in *jlexer.Lexer, out *connectAdminCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "watch":
			out.Watch = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_connectAdminCommand(out *jwriter.Writer, in *connectAdminCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"token\":")
	out.String(string(in.Token))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"watch\":")
	out.Bool(bool(in.Watch))
	out.RawByte('}')
}
func (v *connectAdminCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_connectAdminCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *connectAdminCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_connectAdminCommand(w, v)
}
func (v *connectAdminCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_connectAdminCommand(&r, v)
	return r.Error()
}
func (v *connectAdminCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_connectAdminCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectControlCommand(in *jlexer.Lexer, out *disconnectControlCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = UserID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectControlCommand(out *jwriter.Writer, in *disconnectControlCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.String(string(in.User))
	out.RawByte('}')
}
func (v *disconnectControlCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectControlCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *disconnectControlCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectControlCommand(w, v)
}
func (v *disconnectControlCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectControlCommand(&r, v)
	return r.Error()
}
func (v *disconnectControlCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectControlCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeControlCommand(in *jlexer.Lexer, out *unsubscribeControlCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = UserID(in.String())
		case "channel":
			out.Channel = Channel(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeControlCommand(out *jwriter.Writer, in *unsubscribeControlCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.String(string(in.User))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	out.RawByte('}')
}
func (v *unsubscribeControlCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeControlCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *unsubscribeControlCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeControlCommand(w, v)
}
func (v *unsubscribeControlCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeControlCommand(&r, v)
	return r.Error()
}
func (v *unsubscribeControlCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeControlCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_pingControlCommand(in *jlexer.Lexer, out *pingControlCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "info":
			easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_NodeInfo(in, &out.Info)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_pingControlCommand(out *jwriter.Writer, in *pingControlCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"info\":")
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_NodeInfo(out, &in.Info)
	out.RawByte('}')
}
func (v *pingControlCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_pingControlCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *pingControlCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_pingControlCommand(w, v)
}
func (v *pingControlCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_pingControlCommand(&r, v)
	return r.Error()
}
func (v *pingControlCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_pingControlCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_NodeInfo(in *jlexer.Lexer, out *NodeInfo) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "num_goroutine":
			out.Goroutines = int(in.Int())
		case "num_clients":
			out.Clients = int(in.Int())
		case "num_unique_clients":
			out.Unique = int(in.Int())
		case "num_channels":
			out.Channels = int(in.Int())
		case "started_at":
			out.Started = int64(in.Int64())
		case "gomaxprocs":
			out.Gomaxprocs = int(in.Int())
		case "num_cpu":
			out.NumCPU = int(in.Int())
		case "num_msg_published":
			out.NumMsgPublished = int64(in.Int64())
		case "num_msg_queued":
			out.NumMsgQueued = int64(in.Int64())
		case "num_msg_sent":
			out.NumMsgSent = int64(in.Int64())
		case "num_api_requests":
			out.NumAPIRequests = int64(in.Int64())
		case "num_client_requests":
			out.NumClientRequests = int64(in.Int64())
		case "bytes_client_in":
			out.BytesClientIn = int64(in.Int64())
		case "bytes_client_out":
			out.BytesClientOut = int64(in.Int64())
		case "time_api_mean":
			out.TimeAPIMean = int64(in.Int64())
		case "time_client_mean":
			out.TimeClientMean = int64(in.Int64())
		case "time_api_max":
			out.TimeAPIMax = int64(in.Int64())
		case "time_client_max":
			out.TimeClientMax = int64(in.Int64())
		case "memory_sys":
			out.MemSys = int64(in.Int64())
		case "cpu_usage":
			out.CPU = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_NodeInfo(out *jwriter.Writer, in *NodeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid\":")
	out.String(string(in.UID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_goroutine\":")
	out.Int(int(in.Goroutines))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_clients\":")
	out.Int(int(in.Clients))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_unique_clients\":")
	out.Int(int(in.Unique))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_channels\":")
	out.Int(int(in.Channels))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"started_at\":")
	out.Int64(int64(in.Started))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gomaxprocs\":")
	out.Int(int(in.Gomaxprocs))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_cpu\":")
	out.Int(int(in.NumCPU))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_msg_published\":")
	out.Int64(int64(in.NumMsgPublished))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_msg_queued\":")
	out.Int64(int64(in.NumMsgQueued))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_msg_sent\":")
	out.Int64(int64(in.NumMsgSent))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_api_requests\":")
	out.Int64(int64(in.NumAPIRequests))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"num_client_requests\":")
	out.Int64(int64(in.NumClientRequests))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bytes_client_in\":")
	out.Int64(int64(in.BytesClientIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bytes_client_out\":")
	out.Int64(int64(in.BytesClientOut))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"time_api_mean\":")
	out.Int64(int64(in.TimeAPIMean))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"time_client_mean\":")
	out.Int64(int64(in.TimeClientMean))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"time_api_max\":")
	out.Int64(int64(in.TimeAPIMax))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"time_client_max\":")
	out.Int64(int64(in.TimeClientMax))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory_sys\":")
	out.Int64(int64(in.MemSys))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_usage\":")
	out.Int64(int64(in.CPU))
	out.RawByte('}')
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_historyAPICommand(in *jlexer.Lexer, out *historyAPICommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_historyAPICommand(out *jwriter.Writer, in *historyAPICommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	out.RawByte('}')
}
func (v *historyAPICommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_historyAPICommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *historyAPICommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_historyAPICommand(w, v)
}
func (v *historyAPICommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_historyAPICommand(&r, v)
	return r.Error()
}
func (v *historyAPICommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_historyAPICommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_presenceAPICommand(in *jlexer.Lexer, out *presenceAPICommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_presenceAPICommand(out *jwriter.Writer, in *presenceAPICommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	out.RawByte('}')
}
func (v *presenceAPICommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_presenceAPICommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *presenceAPICommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_presenceAPICommand(w, v)
}
func (v *presenceAPICommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_presenceAPICommand(&r, v)
	return r.Error()
}
func (v *presenceAPICommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_presenceAPICommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectAPICommand(in *jlexer.Lexer, out *disconnectAPICommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = UserID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectAPICommand(out *jwriter.Writer, in *disconnectAPICommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.String(string(in.User))
	out.RawByte('}')
}
func (v *disconnectAPICommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectAPICommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *disconnectAPICommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectAPICommand(w, v)
}
func (v *disconnectAPICommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectAPICommand(&r, v)
	return r.Error()
}
func (v *disconnectAPICommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_disconnectAPICommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeAPICommand(in *jlexer.Lexer, out *unsubscribeAPICommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		case "user":
			out.User = UserID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeAPICommand(out *jwriter.Writer, in *unsubscribeAPICommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.String(string(in.User))
	out.RawByte('}')
}
func (v *unsubscribeAPICommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeAPICommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *unsubscribeAPICommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeAPICommand(w, v)
}
func (v *unsubscribeAPICommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeAPICommand(&r, v)
	return r.Error()
}
func (v *unsubscribeAPICommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_unsubscribeAPICommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_broadcastAPICommand(in *jlexer.Lexer, out *broadcastAPICommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channels":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Channels = make([]Channel, 0, 4)
			} else {
				out.Channels = nil
			}
			for !in.IsDelim(']') {
				var v1 Channel
				v1 = Channel(in.String())
				out.Channels = append(out.Channels, v1)
				in.WantComma()
			}
			in.Delim(']')
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "client":
			out.Client = ConnID(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_broadcastAPICommand(out *jwriter.Writer, in *broadcastAPICommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channels\":")
	out.RawByte('[')
	for v2, v3 := range in.Channels {
		if v2 > 0 {
			out.RawByte(',')
		}
		out.String(string(v3))
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.Raw((in.Data).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"client\":")
	out.String(string(in.Client))
	out.RawByte('}')
}
func (v *broadcastAPICommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_broadcastAPICommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *broadcastAPICommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_broadcastAPICommand(w, v)
}
func (v *broadcastAPICommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_broadcastAPICommand(&r, v)
	return r.Error()
}
func (v *broadcastAPICommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_broadcastAPICommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_publishAPICommand(in *jlexer.Lexer, out *publishAPICommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		case "client":
			out.Client = ConnID(in.String())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_publishAPICommand(out *jwriter.Writer, in *publishAPICommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"client\":")
	out.String(string(in.Client))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.Raw((in.Data).MarshalJSON())
	out.RawByte('}')
}
func (v *publishAPICommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_publishAPICommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *publishAPICommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_publishAPICommand(w, v)
}
func (v *publishAPICommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_publishAPICommand(&r, v)
	return r.Error()
}
func (v *publishAPICommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_publishAPICommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PingClientCommand(in *jlexer.Lexer, out *PingClientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PingClientCommand(out *jwriter.Writer, in *PingClientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.String(string(in.Data))
	out.RawByte('}')
}
func (v *PingClientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PingClientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *PingClientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PingClientCommand(w, v)
}
func (v *PingClientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PingClientCommand(&r, v)
	return r.Error()
}
func (v *PingClientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PingClientCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_HistoryClientCommand(in *jlexer.Lexer, out *HistoryClientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_HistoryClientCommand(out *jwriter.Writer, in *HistoryClientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	out.RawByte('}')
}
func (v *HistoryClientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_HistoryClientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *HistoryClientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_HistoryClientCommand(w, v)
}
func (v *HistoryClientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_HistoryClientCommand(&r, v)
	return r.Error()
}
func (v *HistoryClientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_HistoryClientCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PresenceClientCommand(in *jlexer.Lexer, out *PresenceClientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PresenceClientCommand(out *jwriter.Writer, in *PresenceClientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	out.RawByte('}')
}
func (v *PresenceClientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PresenceClientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *PresenceClientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PresenceClientCommand(w, v)
}
func (v *PresenceClientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PresenceClientCommand(&r, v)
	return r.Error()
}
func (v *PresenceClientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PresenceClientCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PublishClientCommand(in *jlexer.Lexer, out *PublishClientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PublishClientCommand(out *jwriter.Writer, in *PublishClientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.Raw((in.Data).MarshalJSON())
	out.RawByte('}')
}
func (v *PublishClientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PublishClientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *PublishClientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_PublishClientCommand(w, v)
}
func (v *PublishClientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PublishClientCommand(&r, v)
	return r.Error()
}
func (v *PublishClientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_PublishClientCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_UnsubscribeClientCommand(in *jlexer.Lexer, out *UnsubscribeClientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_UnsubscribeClientCommand(out *jwriter.Writer, in *UnsubscribeClientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	out.RawByte('}')
}
func (v *UnsubscribeClientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_UnsubscribeClientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *UnsubscribeClientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_UnsubscribeClientCommand(w, v)
}
func (v *UnsubscribeClientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_UnsubscribeClientCommand(&r, v)
	return r.Error()
}
func (v *UnsubscribeClientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_UnsubscribeClientCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_SubscribeClientCommand(in *jlexer.Lexer, out *SubscribeClientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "channel":
			out.Channel = Channel(in.String())
		case "client":
			out.Client = ConnID(in.String())
		case "last":
			out.Last = MessageID(in.String())
		case "recover":
			out.Recover = bool(in.Bool())
		case "info":
			out.Info = string(in.String())
		case "sign":
			out.Sign = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_SubscribeClientCommand(out *jwriter.Writer, in *SubscribeClientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"channel\":")
	out.String(string(in.Channel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"client\":")
	out.String(string(in.Client))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"last\":")
	out.String(string(in.Last))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"recover\":")
	out.Bool(bool(in.Recover))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"info\":")
	out.String(string(in.Info))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sign\":")
	out.String(string(in.Sign))
	out.RawByte('}')
}
func (v *SubscribeClientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_SubscribeClientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *SubscribeClientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_SubscribeClientCommand(w, v)
}
func (v *SubscribeClientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_SubscribeClientCommand(&r, v)
	return r.Error()
}
func (v *SubscribeClientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_SubscribeClientCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_RefreshClientCommand(in *jlexer.Lexer, out *RefreshClientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = UserID(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_RefreshClientCommand(out *jwriter.Writer, in *RefreshClientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.String(string(in.User))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.String(string(in.Timestamp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"info\":")
	out.String(string(in.Info))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"token\":")
	out.String(string(in.Token))
	out.RawByte('}')
}
func (v *RefreshClientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_RefreshClientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *RefreshClientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_RefreshClientCommand(w, v)
}
func (v *RefreshClientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_RefreshClientCommand(&r, v)
	return r.Error()
}
func (v *RefreshClientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_RefreshClientCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_ConnectClientCommand(in *jlexer.Lexer, out *ConnectClientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = UserID(in.String())
		case "timestamp":
			out.Timestamp = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_ConnectClientCommand(out *jwriter.Writer, in *ConnectClientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.String(string(in.User))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.String(string(in.Timestamp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"info\":")
	out.String(string(in.Info))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"token\":")
	out.String(string(in.Token))
	out.RawByte('}')
}
func (v *ConnectClientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_ConnectClientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *ConnectClientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_ConnectClientCommand(w, v)
}
func (v *ConnectClientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_ConnectClientCommand(&r, v)
	return r.Error()
}
func (v *ConnectClientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_ConnectClientCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_controlCommand(in *jlexer.Lexer, out *controlCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
				out.Params = nil
			} else {
				out.Params = new(json.RawMessage)
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Params).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_controlCommand(out *jwriter.Writer, in *controlCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid\":")
	out.String(string(in.UID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"method\":")
	out.String(string(in.Method))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"params\":")
	if in.Params == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.Params).MarshalJSON())
	}
	out.RawByte('}')
}
func (v *controlCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_controlCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *controlCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_controlCommand(w, v)
}
func (v *controlCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_controlCommand(&r, v)
	return r.Error()
}
func (v *controlCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_controlCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_adminCommand(in *jlexer.Lexer, out *adminCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "params":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Params).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_adminCommand(out *jwriter.Writer, in *adminCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid\":")
	out.String(string(in.UID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"method\":")
	out.String(string(in.Method))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"params\":")
	out.Raw((in.Params).MarshalJSON())
	out.RawByte('}')
}
func (v *adminCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_adminCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *adminCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_adminCommand(w, v)
}
func (v *adminCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_adminCommand(&r, v)
	return r.Error()
}
func (v *adminCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_adminCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_redisAPIRequest(in *jlexer.Lexer, out *redisAPIRequest) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Data = make([]apiCommand, 0, 1)
			} else {
				out.Data = nil
			}
			for !in.IsDelim(']') {
				var v4 apiCommand
				(v4).UnmarshalEasyJSON(in)
				out.Data = append(out.Data, v4)
				in.WantComma()
			}
			in.Delim(']')
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_redisAPIRequest(out *jwriter.Writer, in *redisAPIRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.RawByte('[')
	for v5, v6 := range in.Data {
		if v5 > 0 {
			out.RawByte(',')
		}
		(v6).MarshalEasyJSON(out)
	}
	out.RawByte(']')
	out.RawByte('}')
}
func (v *redisAPIRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_redisAPIRequest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *redisAPIRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_redisAPIRequest(w, v)
}
func (v *redisAPIRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_redisAPIRequest(&r, v)
	return r.Error()
}
func (v *redisAPIRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_redisAPIRequest(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_apiCommand(in *jlexer.Lexer, out *apiCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "params":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Params).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_apiCommand(out *jwriter.Writer, in *apiCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid\":")
	out.String(string(in.UID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"method\":")
	out.String(string(in.Method))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"params\":")
	out.Raw((in.Params).MarshalJSON())
	out.RawByte('}')
}
func (v *apiCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_apiCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *apiCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_apiCommand(w, v)
}
func (v *apiCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_apiCommand(&r, v)
	return r.Error()
}
func (v *apiCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_apiCommand(l, v)
}
func easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_clientCommand(in *jlexer.Lexer, out *clientCommand) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "params":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Params).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_clientCommand(out *jwriter.Writer, in *clientCommand) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid\":")
	out.String(string(in.UID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"method\":")
	out.String(string(in.Method))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"params\":")
	out.Raw((in.Params).MarshalJSON())
	out.RawByte('}')
}
func (v *clientCommand) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_clientCommand(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v *clientCommand) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_encode_github_com_centrifugal_centrifugo_libcentrifugo_clientCommand(w, v)
}
func (v *clientCommand) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_clientCommand(&r, v)
	return r.Error()
}
func (v *clientCommand) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_decode_github_com_centrifugal_centrifugo_libcentrifugo_clientCommand(l, v)
}
