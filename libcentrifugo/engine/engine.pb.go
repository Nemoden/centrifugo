// Code generated by protoc-gen-gogo.
// source: engine.proto
// DO NOT EDIT!

/*
	Package engine is a generated protocol buffer package.

	It is generated from these files:
		engine.proto

	It has these top-level messages:
		ClientInfo
		Message
		JoinMessage
		LeaveMessage
		ControlMessage
		AdminMessage
*/
package engine

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_centrifugal_centrifugo_libcentrifugo_raw "github.com/centrifugal/centrifugo/libcentrifugo/raw"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type ClientInfo struct {
	User        string                                                   `protobuf:"bytes,1,opt,name=User" json:"user"`
	Client      string                                                   `protobuf:"bytes,2,opt,name=Client" json:"client"`
	DefaultInfo *github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw `protobuf:"bytes,3,opt,name=DefaultInfo,customtype=github.com/centrifugal/centrifugo/libcentrifugo/raw.Raw" json:"default_info,omitempty"`
	ChannelInfo *github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw `protobuf:"bytes,4,opt,name=ChannelInfo,customtype=github.com/centrifugal/centrifugo/libcentrifugo/raw.Raw" json:"channel_info,omitempty"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (m *ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{0} }

func (m *ClientInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ClientInfo) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

type Message struct {
	UID       string                                                   `protobuf:"bytes,1,opt,name=UID" json:"uid"`
	Timestamp string                                                   `protobuf:"bytes,2,opt,name=Timestamp" json:"timestamp"`
	Channel   string                                                   `protobuf:"bytes,3,opt,name=Channel" json:"channel"`
	Data      *github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw `protobuf:"bytes,4,opt,name=Data,customtype=github.com/centrifugal/centrifugo/libcentrifugo/raw.Raw" json:"data"`
	Client    string                                                   `protobuf:"bytes,5,opt,name=Client" json:"client,omitempty"`
	Info      *ClientInfo                                              `protobuf:"bytes,6,opt,name=Info" json:"info,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{1} }

func (m *Message) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Message) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Message) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Message) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *Message) GetInfo() *ClientInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type JoinMessage struct {
	Channel string     `protobuf:"bytes,1,opt,name=Channel" json:"channel"`
	Data    ClientInfo `protobuf:"bytes,2,opt,name=Data" json:"data"`
}

func (m *JoinMessage) Reset()                    { *m = JoinMessage{} }
func (m *JoinMessage) String() string            { return proto.CompactTextString(m) }
func (*JoinMessage) ProtoMessage()               {}
func (*JoinMessage) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{2} }

func (m *JoinMessage) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *JoinMessage) GetData() ClientInfo {
	if m != nil {
		return m.Data
	}
	return ClientInfo{}
}

type LeaveMessage struct {
	Channel string     `protobuf:"bytes,1,opt,name=Channel" json:"channel"`
	Data    ClientInfo `protobuf:"bytes,2,opt,name=Data" json:"data"`
}

func (m *LeaveMessage) Reset()                    { *m = LeaveMessage{} }
func (m *LeaveMessage) String() string            { return proto.CompactTextString(m) }
func (*LeaveMessage) ProtoMessage()               {}
func (*LeaveMessage) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{3} }

func (m *LeaveMessage) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *LeaveMessage) GetData() ClientInfo {
	if m != nil {
		return m.Data
	}
	return ClientInfo{}
}

type ControlMessage struct {
	// UID in case of controlCommand is a unique node ID which originally published
	// this control command.
	UID    string                                                   `protobuf:"bytes,1,opt,name=UID" json:"uid"`
	Method string                                                   `protobuf:"bytes,2,opt,name=Method" json:"method"`
	Params *github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw `protobuf:"bytes,3,opt,name=Params,customtype=github.com/centrifugal/centrifugo/libcentrifugo/raw.Raw" json:"params"`
}

func (m *ControlMessage) Reset()                    { *m = ControlMessage{} }
func (m *ControlMessage) String() string            { return proto.CompactTextString(m) }
func (*ControlMessage) ProtoMessage()               {}
func (*ControlMessage) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{4} }

func (m *ControlMessage) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ControlMessage) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type AdminMessage struct {
	UID    string                                                   `protobuf:"bytes,1,opt,name=UID" json:"uid"`
	Method string                                                   `protobuf:"bytes,2,opt,name=Method" json:"method"`
	Params *github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw `protobuf:"bytes,3,opt,name=Params,customtype=github.com/centrifugal/centrifugo/libcentrifugo/raw.Raw" json:"params"`
}

func (m *AdminMessage) Reset()                    { *m = AdminMessage{} }
func (m *AdminMessage) String() string            { return proto.CompactTextString(m) }
func (*AdminMessage) ProtoMessage()               {}
func (*AdminMessage) Descriptor() ([]byte, []int) { return fileDescriptorEngine, []int{5} }

func (m *AdminMessage) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *AdminMessage) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientInfo)(nil), "engine.ClientInfo")
	proto.RegisterType((*Message)(nil), "engine.Message")
	proto.RegisterType((*JoinMessage)(nil), "engine.JoinMessage")
	proto.RegisterType((*LeaveMessage)(nil), "engine.LeaveMessage")
	proto.RegisterType((*ControlMessage)(nil), "engine.ControlMessage")
	proto.RegisterType((*AdminMessage)(nil), "engine.AdminMessage")
}
func (this *ClientInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ClientInfo)
	if !ok {
		that2, ok := that.(ClientInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.Client != that1.Client {
		return false
	}
	if that1.DefaultInfo == nil {
		if this.DefaultInfo != nil {
			return false
		}
	} else if !this.DefaultInfo.Equal(*that1.DefaultInfo) {
		return false
	}
	if that1.ChannelInfo == nil {
		if this.ChannelInfo != nil {
			return false
		}
	} else if !this.ChannelInfo.Equal(*that1.ChannelInfo) {
		return false
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UID != that1.UID {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if !this.Data.Equal(*that1.Data) {
		return false
	}
	if this.Client != that1.Client {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *JoinMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*JoinMessage)
	if !ok {
		that2, ok := that.(JoinMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	return true
}
func (this *LeaveMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LeaveMessage)
	if !ok {
		that2, ok := that.(LeaveMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Channel != that1.Channel {
		return false
	}
	if !this.Data.Equal(&that1.Data) {
		return false
	}
	return true
}
func (this *ControlMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ControlMessage)
	if !ok {
		that2, ok := that.(ControlMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UID != that1.UID {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if that1.Params == nil {
		if this.Params != nil {
			return false
		}
	} else if !this.Params.Equal(*that1.Params) {
		return false
	}
	return true
}
func (this *AdminMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AdminMessage)
	if !ok {
		that2, ok := that.(AdminMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.UID != that1.UID {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if that1.Params == nil {
		if this.Params != nil {
			return false
		}
	} else if !this.Params.Equal(*that1.Params) {
		return false
	}
	return true
}
func (m *ClientInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ClientInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.User)))
	i += copy(data[i:], m.User)
	data[i] = 0x12
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.Client)))
	i += copy(data[i:], m.Client)
	if m.DefaultInfo != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintEngine(data, i, uint64(m.DefaultInfo.Size()))
		n1, err := m.DefaultInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ChannelInfo != nil {
		data[i] = 0x22
		i++
		i = encodeVarintEngine(data, i, uint64(m.ChannelInfo.Size()))
		n2, err := m.ChannelInfo.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Message) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Message) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.UID)))
	i += copy(data[i:], m.UID)
	data[i] = 0x12
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.Timestamp)))
	i += copy(data[i:], m.Timestamp)
	data[i] = 0x1a
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.Channel)))
	i += copy(data[i:], m.Channel)
	if m.Data != nil {
		data[i] = 0x22
		i++
		i = encodeVarintEngine(data, i, uint64(m.Data.Size()))
		n3, err := m.Data.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	data[i] = 0x2a
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.Client)))
	i += copy(data[i:], m.Client)
	if m.Info != nil {
		data[i] = 0x32
		i++
		i = encodeVarintEngine(data, i, uint64(m.Info.Size()))
		n4, err := m.Info.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *JoinMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *JoinMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.Channel)))
	i += copy(data[i:], m.Channel)
	data[i] = 0x12
	i++
	i = encodeVarintEngine(data, i, uint64(m.Data.Size()))
	n5, err := m.Data.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *LeaveMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LeaveMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.Channel)))
	i += copy(data[i:], m.Channel)
	data[i] = 0x12
	i++
	i = encodeVarintEngine(data, i, uint64(m.Data.Size()))
	n6, err := m.Data.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *ControlMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ControlMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.UID)))
	i += copy(data[i:], m.UID)
	data[i] = 0x12
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.Method)))
	i += copy(data[i:], m.Method)
	if m.Params != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintEngine(data, i, uint64(m.Params.Size()))
		n7, err := m.Params.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *AdminMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AdminMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	data[i] = 0xa
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.UID)))
	i += copy(data[i:], m.UID)
	data[i] = 0x12
	i++
	i = encodeVarintEngine(data, i, uint64(len(m.Method)))
	i += copy(data[i:], m.Method)
	if m.Params != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintEngine(data, i, uint64(m.Params.Size()))
		n8, err := m.Params.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func encodeFixed64Engine(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Engine(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEngine(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedClientInfo(r randyEngine, easy bool) *ClientInfo {
	this := &ClientInfo{}
	this.User = randStringEngine(r)
	this.Client = randStringEngine(r)
	if r.Intn(10) != 0 {
		this.DefaultInfo = github_com_centrifugal_centrifugo_libcentrifugo_raw.NewPopulatedRaw(r)
	}
	if r.Intn(10) != 0 {
		this.ChannelInfo = github_com_centrifugal_centrifugo_libcentrifugo_raw.NewPopulatedRaw(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessage(r randyEngine, easy bool) *Message {
	this := &Message{}
	this.UID = randStringEngine(r)
	this.Timestamp = randStringEngine(r)
	this.Channel = randStringEngine(r)
	if r.Intn(10) != 0 {
		this.Data = github_com_centrifugal_centrifugo_libcentrifugo_raw.NewPopulatedRaw(r)
	}
	this.Client = randStringEngine(r)
	if r.Intn(10) != 0 {
		this.Info = NewPopulatedClientInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedJoinMessage(r randyEngine, easy bool) *JoinMessage {
	this := &JoinMessage{}
	this.Channel = randStringEngine(r)
	v1 := NewPopulatedClientInfo(r, easy)
	this.Data = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLeaveMessage(r randyEngine, easy bool) *LeaveMessage {
	this := &LeaveMessage{}
	this.Channel = randStringEngine(r)
	v2 := NewPopulatedClientInfo(r, easy)
	this.Data = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedControlMessage(r randyEngine, easy bool) *ControlMessage {
	this := &ControlMessage{}
	this.UID = randStringEngine(r)
	this.Method = randStringEngine(r)
	if r.Intn(10) != 0 {
		this.Params = github_com_centrifugal_centrifugo_libcentrifugo_raw.NewPopulatedRaw(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAdminMessage(r randyEngine, easy bool) *AdminMessage {
	this := &AdminMessage{}
	this.UID = randStringEngine(r)
	this.Method = randStringEngine(r)
	if r.Intn(10) != 0 {
		this.Params = github_com_centrifugal_centrifugo_libcentrifugo_raw.NewPopulatedRaw(r)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyEngine interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneEngine(r randyEngine) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringEngine(r randyEngine) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneEngine(r)
	}
	return string(tmps)
}
func randUnrecognizedEngine(r randyEngine, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldEngine(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldEngine(data []byte, r randyEngine, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateEngine(data, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		data = encodeVarintPopulateEngine(data, uint64(v4))
	case 1:
		data = encodeVarintPopulateEngine(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateEngine(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateEngine(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateEngine(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateEngine(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *ClientInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.User)
	n += 1 + l + sovEngine(uint64(l))
	l = len(m.Client)
	n += 1 + l + sovEngine(uint64(l))
	if m.DefaultInfo != nil {
		l = m.DefaultInfo.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	if m.ChannelInfo != nil {
		l = m.ChannelInfo.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	l = len(m.UID)
	n += 1 + l + sovEngine(uint64(l))
	l = len(m.Timestamp)
	n += 1 + l + sovEngine(uint64(l))
	l = len(m.Channel)
	n += 1 + l + sovEngine(uint64(l))
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	l = len(m.Client)
	n += 1 + l + sovEngine(uint64(l))
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *JoinMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	n += 1 + l + sovEngine(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovEngine(uint64(l))
	return n
}

func (m *LeaveMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	n += 1 + l + sovEngine(uint64(l))
	l = m.Data.Size()
	n += 1 + l + sovEngine(uint64(l))
	return n
}

func (m *ControlMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.UID)
	n += 1 + l + sovEngine(uint64(l))
	l = len(m.Method)
	n += 1 + l + sovEngine(uint64(l))
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func (m *AdminMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.UID)
	n += 1 + l + sovEngine(uint64(l))
	l = len(m.Method)
	n += 1 + l + sovEngine(uint64(l))
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovEngine(uint64(l))
	}
	return n
}

func sovEngine(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEngine(x uint64) (n int) {
	return sovEngine(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw
			m.DefaultInfo = &v
			if err := m.DefaultInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw
			m.ChannelInfo = &v
			if err := m.ChannelInfo.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw
			m.Data = &v
			if err := m.Data.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &ClientInfo{}
			}
			if err := m.Info.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw
			m.Params = &v
			if err := m.Params.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEngine
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_centrifugal_centrifugo_libcentrifugo_raw.Raw
			m.Params = &v
			if err := m.Params.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEngine(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEngine
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEngine(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEngine
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEngine
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEngine
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEngine
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEngine(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEngine = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEngine   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorEngine = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x53, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xdf, 0x69, 0x63, 0x4a, 0x5f, 0x43, 0xd5, 0x39, 0x48, 0x58, 0xa4, 0x5d, 0x82, 0x87, 0x3d,
	0x68, 0x0a, 0x22, 0x78, 0x36, 0x2d, 0x48, 0xc5, 0x05, 0x11, 0x7b, 0xd8, 0xd3, 0x3a, 0x4d, 0x26,
	0xe9, 0x40, 0x66, 0x26, 0x24, 0x13, 0x17, 0xbf, 0x85, 0x9f, 0x41, 0x11, 0xf6, 0x23, 0xf8, 0x11,
	0xf6, 0xe8, 0xd9, 0x43, 0xf1, 0xcf, 0xcd, 0x4f, 0xe0, 0xd1, 0xd9, 0xc9, 0xec, 0x36, 0x14, 0xc5,
	0x43, 0x15, 0x3c, 0x3c, 0x98, 0x37, 0xef, 0xcd, 0xef, 0x37, 0xbf, 0xdf, 0x9b, 0x01, 0x8f, 0x8a,
	0x8c, 0x09, 0x1a, 0x16, 0xa5, 0x54, 0x12, 0xbb, 0x4d, 0xb6, 0x7f, 0x2f, 0x63, 0x6a, 0x55, 0x2f,
	0xc3, 0x58, 0xf2, 0x49, 0x26, 0x33, 0x39, 0x31, 0xe5, 0x65, 0x9d, 0x9a, 0xcc, 0x24, 0x66, 0xd5,
	0x1c, 0x0b, 0xce, 0x3a, 0x00, 0xd3, 0x9c, 0x51, 0xa1, 0xe6, 0x22, 0x95, 0x78, 0x1f, 0x9c, 0x45,
	0x45, 0x4b, 0x1f, 0x1d, 0xa0, 0xc3, 0x7e, 0xe4, 0x9d, 0xaf, 0xc7, 0x7b, 0xdf, 0xd7, 0x63, 0xa7,
	0xd6, 0x7b, 0x78, 0x04, 0x6e, 0xd3, 0xe9, 0x77, 0x4c, 0x75, 0x68, 0xab, 0x6e, 0x6c, 0x76, 0xb1,
	0x80, 0xc1, 0x8c, 0xa6, 0xa4, 0xce, 0x0d, 0x94, 0xdf, 0xd5, 0x4d, 0x5e, 0x74, 0xac, 0x9b, 0xd0,
	0xa7, 0xf5, 0xf8, 0x61, 0xeb, 0x5a, 0xb1, 0xee, 0x2e, 0x59, 0x5a, 0x67, 0x24, 0xdf, 0xac, 0xe5,
	0x24, 0x67, 0xcb, 0x56, 0x56, 0x92, 0xd3, 0xf0, 0x39, 0x39, 0xd5, 0xf8, 0xb7, 0x92, 0x06, 0xf5,
	0x84, 0x69, 0xd8, 0xbb, 0x92, 0x33, 0x45, 0x79, 0xa1, 0x5e, 0x5f, 0xf0, 0x4d, 0x57, 0x44, 0x08,
	0x9a, 0x1b, 0x3e, 0xe7, 0xaf, 0xf1, 0xc5, 0x0d, 0xea, 0x16, 0x5f, 0xf0, 0xb6, 0x03, 0xbd, 0x23,
	0x5a, 0x55, 0x24, 0xa3, 0xd8, 0x87, 0xee, 0x62, 0x3e, 0xb3, 0x36, 0x0d, 0xac, 0x11, 0xdd, 0x9a,
	0x25, 0xf8, 0x0e, 0xf4, 0x5f, 0x30, 0x4e, 0x2b, 0x45, 0x78, 0x61, 0x8d, 0xba, 0x69, 0xeb, 0x7d,
	0x75, 0x59, 0xc0, 0x07, 0xd0, 0xb3, 0x77, 0x37, 0x3e, 0xf5, 0xa3, 0xeb, 0xb6, 0xa7, 0x67, 0xc9,
	0xf1, 0x02, 0x9c, 0x19, 0x51, 0xc4, 0xca, 0x7a, 0xbc, 0xbb, 0x2c, 0x27, 0xd1, 0x70, 0xf8, 0xf0,
	0x6a, 0x88, 0xd7, 0x0c, 0xaf, 0x6f, 0x79, 0x6f, 0x34, 0x43, 0x6c, 0xd9, 0xfb, 0x00, 0x1c, 0xe3,
	0xab, 0xab, 0xfb, 0x06, 0xf7, 0x71, 0x68, 0x5f, 0xdb, 0xe6, 0xb1, 0x44, 0x58, 0x9f, 0x1b, 0x6e,
	0x99, 0x74, 0x02, 0x83, 0x27, 0x92, 0x89, 0x4b, 0x9f, 0x5a, 0x3a, 0xd1, 0xaf, 0x75, 0x86, 0x56,
	0x67, 0xe7, 0xb7, 0x34, 0x57, 0xaf, 0xf0, 0x42, 0x40, 0xf0, 0x12, 0xbc, 0xa7, 0x94, 0xbc, 0xa2,
	0xff, 0x8e, 0xe1, 0x3d, 0x82, 0xe1, 0x54, 0x6a, 0x07, 0x65, 0xfe, 0xe7, 0x71, 0xeb, 0x4f, 0x71,
	0x44, 0xd5, 0x4a, 0x26, 0xdb, 0x9f, 0x82, 0x9b, 0x5d, 0x7c, 0x0c, 0xee, 0x33, 0x52, 0x12, 0x5e,
	0xd9, 0xff, 0x30, 0xdf, 0x7d, 0x90, 0x6e, 0x61, 0x00, 0x83, 0x77, 0x08, 0xbc, 0x47, 0x09, 0xdf,
	0x98, 0xfd, 0x3f, 0xde, 0x32, 0xba, 0xfd, 0xe3, 0xcb, 0x08, 0x9d, 0x7d, 0x1d, 0xa1, 0x0f, 0x3a,
	0xce, 0x75, 0x7c, 0xd4, 0xf1, 0x59, 0xc7, 0x9b, 0x6f, 0xa3, 0xbd, 0x9f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xba, 0xa2, 0x5b, 0x5a, 0xc4, 0x04, 0x00, 0x00,
}
